let scene=new THREE.Scene,camera=(scene.background=new THREE.Color(1710618),new THREE.PerspectiveCamera(75,window.innerWidth/window.innerHeight,.1,1e3)),renderer=new THREE.WebGLRenderer({powerPreference:"high-performance",antialias:!0,depth:!0,stencil:!1}),ambientLight=(renderer.setSize(window.innerWidth,window.innerHeight),renderer.setPixelRatio(Math.min(window.devicePixelRatio,2)),renderer.outputEncoding=THREE.sRGBEncoding,renderer.toneMapping=THREE.ACESFilmicToneMapping,renderer.toneMappingExposure=1.2,renderer.shadowMap.enabled=!0,renderer.shadowMap.type=THREE.PCFSoftShadowMap,document.querySelector(".corridor").appendChild(renderer.domElement),new THREE.AmbientLight(16777215,.3)),keyLight=(scene.add(ambientLight),new THREE.DirectionalLight(16777215,.6)),fillLight=(keyLight.position.set(5,8,5),keyLight.castShadow=!0,keyLight.shadow.mapSize.width=2048,keyLight.shadow.mapSize.height=2048,keyLight.shadow.camera.near=.5,keyLight.shadow.camera.far=50,scene.add(keyLight),new THREE.DirectionalLight(16777215,.2)),initialAngle=(fillLight.position.set(-5,3,5),scene.add(fillLight),Math.PI/4),radius=Math.sqrt(50),currentAngle=initialAngle,targetAngle=initialAngle,currentY=0,targetY=0,mouseX=(camera.position.set(5,0,5),camera.lookAt(0,0,0),0),mouseY=0,windowHalfX=window.innerWidth/2,windowHalfY=window.innerHeight/2,emissiveColors=(document.addEventListener("mousemove",e=>{mouseX=(e.clientX-windowHalfX)/windowHalfX,mouseY=(e.clientY-windowHalfY)/windowHalfY,targetAngle=initialAngle+.35*-mouseX,targetY=1.5*-mouseY}),{screen:new THREE.Color(65280),lamp:new THREE.Color(16755200),light:new THREE.Color(16777215)}),loader=new THREE.GLTFLoader,modelPath="./assets/images/scene.gltf",renderScene=(loader.load(modelPath,e=>{e=e.scene;console.log("Model loaded successfully!"),e.traverse(e=>{var n;e.isMesh&&(e.castShadow=!0,e.receiveShadow=!0,e.material)&&(console.log("Processing: "+e.name),console.log("Original material:",e.material),e.material.map&&(e.material.map.encoding=THREE.sRGBEncoding,e.material.map.flipY=!1),(n=e.name.toLowerCase()).includes("screen")?(e.material.emissive=emissiveColors.screen,e.material.emissiveIntensity=.3):n.includes("lamp")||n.includes("light")?(e.material.emissive=emissiveColors.lamp,e.material.emissiveIntensity=.2):n.includes("bulb")&&(e.material.emissive=emissiveColors.light,e.material.emissiveIntensity=.4))});var n=(new THREE.Box3).setFromObject(e).getCenter(new THREE.Vector3);e.position.sub(n),scene.add(e),document.querySelector(".loading").style.display="none",console.log("Model added to scene!")},e=>{console.log("Loading progress:",e.loaded/e.total*100+"%")},e=>{console.error("Error loading model:",e),document.querySelector(".loading").innerHTML="Error loading model. Check console for details."}),new THREE.RenderPass(scene,camera)),bloomPass=new THREE.UnrealBloomPass(new THREE.Vector2(window.innerWidth,window.innerHeight),1.5,.4,.85),FilmGrainShader={uniforms:{tDiffuse:{value:null},time:{value:0},amount:{value:.08},speed:{value:2},size:{value:1}},vertexShader:`
                varying vec2 vUv;
                void main() {
                    vUv = uv;
                    gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
                }
            `,fragmentShader:`
                uniform float time;
                uniform float amount;
                uniform float speed;
                uniform float size;
                uniform sampler2D tDiffuse;
                varying vec2 vUv;
                
                float random(vec2 co){
                    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);
                }
                
                void main(){
                    vec4 color = texture2D(tDiffuse, vUv);
                    vec2 position = vUv;
                    position *= size;
                    float grain = random(position * time * speed);
                    color.rgb += grain * amount;
                    gl_FragColor = color;
                }
            `},filmGrainPass=new THREE.ShaderPass(FilmGrainShader),composer=(filmGrainPass.renderToScreen=!0,new THREE.EffectComposer(renderer)),controls=(composer.addPass(renderScene),composer.addPass(bloomPass),composer.addPass(filmGrainPass),{exposure:document.getElementById("exposure"),bloom:document.getElementById("bloom"),grain:document.getElementById("grain"),ambient:document.getElementById("ambient")});function lerp(e,n,i){return e+(n-e)*i}function animate(){requestAnimationFrame(animate),filmGrainPass.uniforms.time.value=.001*performance.now(),currentAngle=lerp(currentAngle,targetAngle,.025),currentY=lerp(currentY,targetY,.025),camera.position.x=radius*Math.cos(currentAngle),camera.position.z=radius*Math.sin(currentAngle),camera.position.y=lerp(camera.position.y,currentY,.05),camera.lookAt(0,0,0),composer.render()}function onWindowResize(){camera.aspect=window.innerWidth/window.innerHeight,camera.updateProjectionMatrix(),renderer.setSize(window.innerWidth,window.innerHeight),composer.setSize(window.innerWidth,window.innerHeight)}controls.exposure.addEventListener("input",e=>{renderer.toneMappingExposure=parseFloat(e.target.value)}),controls.bloom.addEventListener("input",e=>{bloomPass.strength=parseFloat(e.target.value)}),controls.grain.addEventListener("input",e=>{filmGrainPass.uniforms.amount.value=parseFloat(e.target.value)}),controls.ambient.addEventListener("input",e=>{ambientLight.intensity=parseFloat(e.target.value)}),window.addEventListener("resize",onWindowResize,!1),animate(),console.log("Three.js Scene initialized!"),console.log("Waiting for model to load..."),document.addEventListener("keydown",e=>{switch(e.key){case"r":case"R":currentAngle=initialAngle,targetAngle=initialAngle,currentY=0,targetY=0;break;case" ":e.preventDefault();var n=document.querySelector(".controls");n.style.display="none"===n.style.display?"block":"none"}});